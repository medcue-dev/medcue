name: Multi-Repository Orchestration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'
          docs:
            - 'docs/**'
            - '*.md'
          infrastructure:
            - 'scripts/**'
            - 'monitoring/**'
            - 'docker-compose*.yml'
            - '.env.example'

  trigger-backend-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Trigger Backend CI
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
            owner: 'medcue-dev',
            repo: 'backend',
            workflow_id: 'backend-ci.yml',
            ref: 'main'
          });
          console.log('Triggered backend CI workflow');

  trigger-frontend-ci:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Trigger Frontend CI
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
            owner: 'medcue-dev',
            repo: 'frontend',
            workflow_id: 'frontend-ci.yml',
            ref: 'main'
          });
          console.log('Triggered frontend CI workflow');

  integration-tests:
    needs: [detect-changes, trigger-backend-ci, trigger-frontend-ci]
    if: always() && (needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.frontend-changed == 'true')
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_medcue
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up test environment
      run: |
        cp .env.example .env
        
        # Configure test environment
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_medcue" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "SECRET_KEY=test-secret-key-for-integration" >> .env
        echo "ENCRYPTION_KEY=test-encryption-key-32-chars-long" >> .env

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --build
        sleep 30

    - name: Run integration tests
      run: |
        echo "üß™ Running cross-repository integration tests..."
        
        # Test API endpoints
        echo "Testing backend health endpoint..."
        curl -f http://localhost:8000/health || exit 1
        
        echo "Testing frontend health endpoint..."
        curl -f http://localhost:3000/api/health || echo "Frontend health check not available"
        
        # Test API integration
        echo "Testing authentication flow..."
        response=$(curl -X POST http://localhost:8000/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"TestPass123!","first_name":"Test","last_name":"User"}' \
          -w "%{http_code}" -o /dev/null -s)
        
        if [[ $response -eq 201 || $response -eq 400 ]]; then
          echo "‚úÖ Authentication endpoint responding correctly"
        else
          echo "‚ùå Authentication endpoint failed with status $response"
          exit 1
        fi
        
        echo "‚úÖ Integration tests completed successfully"

    - name: Stop services
      if: always()
      run: docker-compose down

  security-audit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: HIPAA compliance check
      run: |
        echo "üîí Multi-Repository HIPAA Compliance Audit"
        
        # Check for encryption implementation across repositories
        encryption_found=false
        if find . -name "*.py" -exec grep -l "AES\|encrypt" {} \; | head -1; then
          encryption_found=true
        fi
        
        if find . -name "*.ts" -name "*.tsx" -exec grep -l "encrypt\|crypto" {} \; | head -1; then
          encryption_found=true
        fi
        
        if [[ "$encryption_found" == "true" ]]; then
          echo "‚úÖ Encryption implementation found across repositories"
        else
          echo "‚ùå No encryption implementation detected"
          exit 1
        fi
        
        # Check for audit logging
        if find . -name "*.py" -exec grep -l "audit\|log" {} \; | head -1; then
          echo "‚úÖ Audit logging implementation found"
        else
          echo "‚ùå No audit logging detected"
          exit 1
        fi
        
        echo "‚úÖ Multi-repository HIPAA compliance checks passed"

  deploy-staging:
    needs: [integration-tests, security-audit]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Deploy to staging
      run: |
        chmod +x scripts/deploy-gcp.sh
        ENVIRONMENT=staging ./scripts/deploy-gcp.sh

    - name: Run post-deployment tests
      run: |
        echo "üß™ Running post-deployment tests..."
        
        # Wait for services to be ready
        sleep 60
        
        # Get service URLs
        BACKEND_URL=$(gcloud run services describe medcue-backend-staging \
          --region=${{ env.GCP_REGION }} \
          --format="value(status.url)" \
          --project=${{ env.GCP_PROJECT_ID }})
        
        FRONTEND_URL=$(gcloud run services describe medcue-frontend-staging \
          --region=${{ env.GCP_REGION }} \
          --format="value(status.url)" \
          --project=${{ env.GCP_PROJECT_ID }})
        
        # Test deployed services
        curl -f "$BACKEND_URL/health" || exit 1
        curl -f "$FRONTEND_URL/api/health" || echo "Frontend health check not available"
        
        echo "‚úÖ Post-deployment tests passed"
        echo "üåê Staging URLs:"
        echo "Backend: $BACKEND_URL"
        echo "Frontend: $FRONTEND_URL"

  deploy-production:
    needs: [integration-tests, security-audit]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Deploy to production
      run: |
        chmod +x scripts/deploy-gcp.sh
        ENVIRONMENT=production ./scripts/deploy-gcp.sh

    - name: Run production health checks
      run: |
        echo "üè• Running production health checks..."
        
        # Wait for services to be ready
        sleep 60
        
        # Get service URLs
        BACKEND_URL=$(gcloud run services describe medcue-backend \
          --region=${{ env.GCP_REGION }} \
          --format="value(status.url)" \
          --project=${{ env.GCP_PROJECT_ID }})
        
        FRONTEND_URL=$(gcloud run services describe medcue-frontend \
          --region=${{ env.GCP_REGION }} \
          --format="value(status.url)" \
          --project=${{ env.GCP_PROJECT_ID }})
        
        # Test deployed services
        curl -f "$BACKEND_URL/health" || exit 1
        curl -f "$BACKEND_URL/health/detailed" || exit 1
        curl -f "$BACKEND_URL/health/hipaa" || exit 1
        curl -f "$FRONTEND_URL/api/health" || echo "Frontend health check not available"
        
        echo "‚úÖ Production health checks passed"
        echo "üöÄ Production URLs:"
        echo "Backend: $BACKEND_URL"
        echo "Frontend: $FRONTEND_URL"

  notify-deployment:
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify deployment success
      run: |
        echo "üéâ Multi-Repository Deployment Completed Successfully!"
        
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "‚úÖ Staging deployment successful"
        fi
        
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "‚úÖ Production deployment successful"
        fi
        
        echo "üìä Deployment Summary:"
        echo "- Backend CI: Triggered for backend changes"
        echo "- Frontend CI: Triggered for frontend changes"
        echo "- Integration tests: Passed"
        echo "- Security audit: Passed"
        echo "- HIPAA compliance: Verified"
        echo "- Multi-repository coordination: Successful"