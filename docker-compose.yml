services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medcue-postgres
    environment:
      POSTGRES_USER: medcue_user
      POSTGRES_PASSWORD: secure_password_change_this
      POSTGRES_DB: medcue_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - medcue-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medcue_user -d medcue_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medcue-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - medcue-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass redis_password_change_this
    volumes:
      - redis_data:/data

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medcue-backend
    ports:
      - "8000:8000"
    environment:
      # Application
      - DEBUG=True
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      
      # Database
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=medcue_user
      - POSTGRES_PASSWORD=secure_password_change_this
      - POSTGRES_DB=medcue_db
      - POSTGRES_PORT=5432
      
      # Redis
      - REDIS_URL=redis://:redis_password_change_this@redis:6379/0
      
      # Security Keys (Development only!)
      - SECRET_KEY=development-secret-key-change-in-production-long-and-secure
      - ENCRYPTION_KEY=development-encryption-key-change-in-production-32-chars
      
      # Tokens
      - ACCESS_TOKEN_EXPIRE_MINUTES=15
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # CORS
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","http://frontend:3000"]
      
      # External Services (Optional for development)
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID:-}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN:-}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - medcue-network
    volumes:
      - ./backend/app:/app/app:ro  # Mount for development hot reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database Migrations
  migrations:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: medcue-migrations
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=medcue_user
      - POSTGRES_PASSWORD=secure_password_change_this
      - POSTGRES_DB=medcue_db
      - SECRET_KEY=development-secret-key-change-in-production-long-and-secure
      - ENCRYPTION_KEY=development-encryption-key-change-in-production-32-chars
    depends_on:
      postgres:
        condition: service_healthy
    command: alembic upgrade head
    networks:
      - medcue-network
    volumes:
      - ./backend/alembic:/app/alembic:ro
      - ./backend/alembic.ini:/app/alembic.ini:ro

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: medcue-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_APP_NAME=MedCue
      - NEXT_PUBLIC_APP_VERSION=1.0.0
      - NEXT_PUBLIC_ENVIRONMENT=development
      - NEXT_PUBLIC_ENCRYPTION_KEY=development-encryption-key-change-in-production
      - NEXT_PUBLIC_SHOW_DEBUG_INFO=true
      - NEXT_PUBLIC_ENABLE_ANALYTICS=false
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - medcue-network
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/next.config.js:/app/next.config.js:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - frontend_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: medcue-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - medcue-network
    profiles:
      - production

  # Development Tools
  
  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: medcue-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@medcue.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - medcue-network
    profiles:
      - tools

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: medcue-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password_change_this
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - medcue-network
    profiles:
      - tools

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: medcue-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web interface
    restart: unless-stopped
    networks:
      - medcue-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  medcue-network:
    driver: bridge
    name: medcue_network